name: Deploy Monitoring Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: monitoring-cluster
  TERRAFORM_VERSION: "1.5.0"
  HELM_VERSION: "v3.12.0"
  NAMESPACE: "monitoring"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./project/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./project/terraform
        run: terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl cluster-info

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm Repositories
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Create Namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Loki
        run: |
          echo "Installing Loki..."
          helm upgrade --install loki grafana/loki \
            --namespace ${{ env.NAMESPACE }} \
            --set singleBinary.enabled=true \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --atomic \
            --timeout 10m

      - name: Check Loki Status
        run: |
          echo "Waiting for Loki pods..."
          kubectl -n ${{ env.NAMESPACE }} get pods -l app=loki -w

      - name: Show Deployment Status
        if: always()
        run: |
          echo "=== Deployment Status ==="
          echo "Pods:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo "Services:"
          kubectl get svc -n ${{ env.NAMESPACE }}
          echo "PVCs:"
          kubectl get pvc -n ${{ env.NAMESPACE }}
          echo "======================="