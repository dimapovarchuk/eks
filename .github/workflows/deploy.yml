name: Deploy Monitoring Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: monitoring-cluster
  TERRAFORM_VERSION: "1.5.0"
  HELM_VERSION: "v3.12.0"
  NAMESPACE: "monitoring"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./project/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./project/terraform
        run: terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl cluster-info

      - name: Remove Node Taints
        run: |
          echo "Removing taints from nodes..."
          for node in $(kubectl get nodes --no-headers -o custom-columns=":metadata.name"); do
            kubectl taint nodes $node dedicated=monitoring:NoSchedule- || true
            echo "Removed taint from node $node"
          done
          
          echo "Verifying nodes status:"
          kubectl describe nodes | grep Taints

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm Repositories
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Reset Namespace
        run: |
          echo "Deleting namespace if exists..."
          kubectl delete namespace ${{ env.NAMESPACE }} --timeout=300s || true
          
          echo "Waiting for namespace deletion..."
          while kubectl get namespace ${{ env.NAMESPACE }} 2>/dev/null; do
            echo "Waiting for namespace to be deleted..."
            sleep 5
          done
          
          echo "Creating new namespace..."
          kubectl create namespace ${{ env.NAMESPACE }}

      - name: Cleanup Previous Helm Releases
        run: |
          echo "Cleaning up previous Helm releases..."
          helm list -n ${{ env.NAMESPACE }} | grep -E 'loki|mimir|tempo|grafana' | awk '{print $1}' | xargs -r helm uninstall -n ${{ env.NAMESPACE }} || true
          
          echo "Waiting for cleanup..."
          sleep 30

      - name: Deploy Loki Stack
        run: |
          echo "Installing Loki Stack..."
          helm upgrade --install loki grafana/loki-stack \
            --namespace ${{ env.NAMESPACE }} \
            --set loki.enabled=true \
            --set promtail.enabled=true \
            --set grafana.enabled=false \
            --set loki.persistence.enabled=false \
            --set loki.replicas=1 \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Wait for Loki
        run: |
          echo "Waiting for Loki pods..."
          kubectl wait --for=condition=ready pod -l app=loki -n ${{ env.NAMESPACE }} --timeout=300s || true

      - name: Deploy Mimir
        if: success()
        run: |
          echo "Installing Mimir..."
          helm upgrade --install mimir grafana/mimir-distributed \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail      - name: Deploy Mimir
        if: success()
        run: |
          echo "Installing Mimir..."
          helm upgrade --install mimir grafana/mimir-distributed \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=false \
            --set minio.enabled=false \
            --set alertmanager.enabled=false \
            --set ruler.enabled=false \
            --set store_gateway.enabled=false \
            --set compactor.enabled=false \
            --set distributor.replicas=1 \
            --set ingester.replicas=1 \
            --set querier.replicas=1 \
            --set query_frontend.replicas=1 \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail


      - name: Deploy Tempo
        if: success()
        run: |
          echo "Installing Tempo..."
          helm upgrade --install tempo grafana/tempo \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Deploy Grafana
        if: success()
        run: |
          echo "Installing Grafana..."
          helm upgrade --install grafana grafana/grafana \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --set adminPassword=admin \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Show Deployment Status
        if: always()
        run: |
          echo "=== Deployment Status ==="
          echo "Cluster Info:"
          kubectl cluster-info
          
          echo "Nodes:"
          kubectl get nodes
          
          echo "Storage Classes:"
          kubectl get storageclass
          
          echo "Pods:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          echo "Services:"
          kubectl get svc -n ${{ env.NAMESPACE }}
          
          echo "PVCs:"
          kubectl get pvc -n ${{ env.NAMESPACE }}
          
          echo "Events:"
          kubectl get events -n ${{ env.NAMESPACE }}
          
          echo "Helm Releases:"
          helm list -n ${{ env.NAMESPACE }}
          
          echo "Grafana URL:"
          kubectl get svc -n ${{ env.NAMESPACE }} grafana -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          
          echo "======================="