name: Deploy Monitoring Stack

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  CLUSTER_NAME: monitoring-cluster
  TERRAFORM_VERSION: "1.5.0"
  HELM_VERSION: "v3.12.0"
  NAMESPACE: "monitoring"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./project/terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./project/terraform
        run: terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl cluster-info

      - name: Verify EBS CSI Driver
        run: |
          echo "Checking EBS CSI Driver status..."
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver
          
          echo "Checking if pods are ready..."
          READY_PODS=$(kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | tr ' ' '\n' | grep true | wc -l)
          TOTAL_PODS=$(kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-ebs-csi-driver --no-headers | wc -l)
          
          if [ "$READY_PODS" -eq "$TOTAL_PODS" ]; then
            echo "EBS CSI Driver is ready"
          else
            echo "Warning: EBS CSI Driver is not fully ready"
          fi

      - name: Check Node IAM Role
        run: |
          NODE_GROUP=$(aws eks list-nodegroups --cluster-name ${{ env.CLUSTER_NAME }} --query 'nodegroups[0]' --output text)
          ROLE_ARN=$(aws eks describe-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name $NODE_GROUP --query 'nodegroup.nodeRole' --output text)
          ROLE_NAME=$(echo $ROLE_ARN | cut -d'/' -f2)
          echo "Node IAM Role ARN: $ROLE_ARN"
          echo "Node IAM Role Name: $ROLE_NAME"
          aws iam get-role --role-name $ROLE_NAME

      - name: Remove Node Taints
        run: |
          echo "Removing taints from nodes..."
          for node in $(kubectl get nodes --no-headers -o custom-columns=":metadata.name"); do
            kubectl taint nodes $node dedicated=monitoring:NoSchedule- || true
            echo "Removed taint from node $node"
          done
          
          echo "Verifying nodes status:"
          kubectl describe nodes | grep Taints

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm Repositories
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Reset Namespace
        run: |
          echo "Deleting namespace if exists..."
          kubectl delete namespace ${{ env.NAMESPACE }} --timeout=300s || true
          
          echo "Waiting for namespace deletion..."
          while kubectl get namespace ${{ env.NAMESPACE }} 2>/dev/null; do
            echo "Waiting for namespace to be deleted..."
            sleep 5
          done
          
          echo "Creating new namespace..."
          kubectl create namespace ${{ env.NAMESPACE }}

      - name: Deploy Loki Stack
        run: |
          echo "Installing Loki Stack..."
          helm upgrade --install loki grafana/loki-stack \
            --namespace ${{ env.NAMESPACE }} \
            --set loki.enabled=true \
            --set promtail.enabled=true \
            --set grafana.enabled=false \
            --set loki.persistence.enabled=false \
            --set loki.replicas=1 \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Deploy Prometheus
        if: success()
        run: |
          echo "Installing Prometheus..."
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace ${{ env.NAMESPACE }} \
            --set server.persistentVolume.enabled=false \
            --set alertmanager.enabled=false \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Deploy Tempo
        if: success()
        run: |
          echo "Installing Tempo..."
          helm upgrade --install tempo grafana/tempo \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=false \
            --atomic \
            --timeout 10m \
            --cleanup-on-fail

      - name: Deploy Grafana
        if: success()
        run: |
          echo "Installing Grafana..."
          helm upgrade --install grafana grafana/grafana \
            --namespace ${{ env.NAMESPACE }} \
            --set persistence.enabled=false \
            --set adminPassword=admin \
            --set service.type=LoadBalancer \
            --set service.annotations."service\\.beta\\.kubernetes\\.io/aws-load-balancer-type"="nlb" \
            --set resources.requests.cpu=100m \
            --set resources.requests.memory=128Mi \
            --set resources.limits.cpu=200m \
            --set resources.limits.memory=256Mi \
            --set datasources."datasources\\.yaml".apiVersion=1 \
            --set datasources."datasources\\.yaml".datasources[0].name=Prometheus \
            --set datasources."datasources\\.yaml".datasources[0].type=prometheus \
            --set datasources."datasources\\.yaml".datasources[0].url=http://prometheus-server \
            --set datasources."datasources\\.yaml".datasources[0].access=proxy \
            --set datasources."datasources\\.yaml".datasources[1].name=Loki \
            --set datasources."datasources\\.yaml".datasources[1].type=loki \
            --set datasources."datasources\\.yaml".datasources[1].url=http://loki:3100 \
            --set datasources."datasources\\.yaml".datasources[1].access=proxy \
            --atomic \
            --timeout 5m \
            --cleanup-on-fail

      - name: Wait for Grafana
        run: |
          echo "Waiting for Grafana deployment..."
          kubectl rollout status deployment/grafana -n ${{ env.NAMESPACE }} --timeout=300s
          
          echo "Waiting for Grafana service..."
          for i in $(seq 1 30); do
            if kubectl get svc grafana -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null; then
              echo "LoadBalancer is ready"
              break
            fi
            echo "Waiting for LoadBalancer... ($i/30)"
            sleep 10
          done

      - name: Show Deployment Status
        if: always()
        run: |
          echo "=== Deployment Status ==="
          echo "Cluster Info:"
          kubectl cluster-info
          
          echo "Nodes:"
          kubectl get nodes
          
          echo "Storage Classes:"
          kubectl get storageclass
          
          echo "Pods:"
          kubectl get pods -n ${{ env.NAMESPACE }}
          
          echo "Services:"
          kubectl get svc -n ${{ env.NAMESPACE }}
          
          echo "Events:"
          kubectl get events -n ${{ env.NAMESPACE }}
          
          echo "Helm Releases:"
          helm list -n ${{ env.NAMESPACE }}
          
          echo "Grafana URL:"
          GRAFANA_URL=$(kubectl get svc grafana -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "http://$GRAFANA_URL"
          echo ""
          echo "Grafana Credentials:"
          echo "Username: admin"
          echo "Password: admin"
          
          echo "======================="